{"version":3,"sources":["components/input_form/TextHexInput.js","components/input_form/TextDecInput.js","components/input_form/TextBinInput.js","components/utils/integerConversion.js","components/InputForm.js","components/display_board/BackgroundTable.js","components/display_board/DivisionSymbol.js","components/display_board/ToggleButtons.js","components/DisplayBoard.js","components/instr_panel/DefaultInstr.js","components/instr_panel/InstrJsonParser.js","components/instr_panel/InstrEditPopup.js","components/InstrPanel.js","App.js","index.js"],"names":["TextHexInput","onChange","value","className","type","TextDecInput","TextBinInput","reverseStr","s","split","reverse","join","customDiv","i","div","Math","floor","longDiv","base","spc","r","q","length","ori_s","substring","parseInt","_q","_r","toString","padStart","convBase2to16","ret","_s","convBase16to2","console","log","convertBase10to2","convertBase10to16","convBase2to10","convBase16to10","convertNumber","fromBase","toBase","trimHeadZero","needRev","replace","InputForm","convInput","setConvInput","CHAR_LIMIT","2","10","16","INPUT_VALIDATION_FUNC","test","emptyErrMssg","useState","inputBase","inputcontent","isValidInput","errMssg","inputstr","setInput","convertNumberHelper","customHandleChange","inbase","evt","maxlength","validateFunc","trim","isNaN","newConvInput","checkConvInput","target","_errMssg","style","display","flexDirection","BgTable","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","marginBottom","textAlign","width","map","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","customCellSPan","getCellProps","colSpan","DivisionSymbol","colIndex","isAllowChange","divCol","setDivCol","color","onClick","_divCol","prevState","convDisplayBitform","displayBitform","ToggleButtons","setDisplayBitform","setPrevDBF","toggleBackground","val","ToggleButtonGroup","exclusive","aria-label","e","preval","handleChange","ToggleButton","background","rowInfoEnum","Object","freeze","COL_NUM_PER_ROW","limitIndex","DisplayBoard","selItem","bitform","divDict","initDivCol","prevDBF","getUpdateDivCol","renew","updateDivCol","entries","colIdx","fields","tailPos","position","frontPos","useEffect","genDivSym","Header","accessor","Cell","props","getCol","startIdx","endIdx","j","divSymDict","push","fontSize","marginLeft","marginRight","React","useMemo","adjustSpan","span","frontTailIdx","prev_i","f","t","getRowNum","idx","max","initRowCumSpan","posDict","defDict","key","default","index","revConvInput","rowlen","tempData","rowCumSpan","strform","bitrnginfo","name","hexform","decform","bitIdx","bitstrform","inputStrform","error","getData","ScrollView","height","marginTop","persistentScrollbar","genBgTable","checkInstrFormat","instr","Number","isInteger","strformat","posSet","Set","Array","isArray","has","add","createList","instrList","match","checkRet","keySet","checkInstrListFormat","instr_list","setSelItem","setInstrList","selFieldIx","setSelFieldIdx","sort","a","b","count","convFieldsToList","fieldList","setFieldList","createItem","item","margin","defaultValue","renderSeparator","View","backgroundColor","trigger","modal","nested","close","onSubmit","event","key_id","preventDefault","myFormData","FormData","formDataObj","forEach","field_key_dict","startsWith","endsWith","field_key","elem","selIdx","prevInstrList","err","alert","handleSubmit","newField","fieldIdxList","field","addfield","idxToDelete","filter","delfield","FlatList","renderItem","TouchableOpacity","onPress","handleItemClick","numColumns","keyExtractor","ItemSeparatorComponent","InstrPanel","unnameCnt","setUnnameCnt","defListItems","31","size","opc","Rm","option","S","11","Rn","Rt","imm9","createDefList","fileRef","useRef","fileContent","setFileContent","selectItem","alignContent","borderStyle","padding","id","ref","files","fileReader","FileReader","readAsText","onload","content","result","newInstrList","jsContent","JSON","parse","loadFile","jsonString","encodeURIComponent","stringify","shift","creatJson","link","document","createElement","href","download","click","exportData","newInstr","instrKeyList","addNewInstr","text","keyToDelete","delInstr","selIndex","def","posT","posH","includes","autoMatchItem","App","env","VERSION","state","bind","window","scrollTo","title","updateConvInput","this","setState","updateSelItem","Component","NODE_ENV","debug","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a756eaa2.chunk.js","sourcesContent":["import \"./TextInput.css\";\r\n\r\nconst TextHexInput = ({onChange,value}) => {\r\n\r\n    return (\r\n        <input\r\n            className=\"textinput hex\"\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n        >\r\n        </input>\r\n            \r\n    );\r\n    \r\n}\r\n\r\nexport default TextHexInput; ","import \"./TextInput.css\";\r\n// import React from \"react\";\r\n// import ContentEditable from \"react-contenteditable\";\r\n\r\nconst TextDecInput = ({onChange,value}) => {\r\n    return (\r\n        <input\r\n            className=\"textinput dec\"\r\n            type=\"text\"\r\n            value = {value}\r\n            onChange = {onChange}\r\n        >\r\n        </input>\r\n            \r\n    );\r\n}\r\n\r\nexport default TextDecInput; ","import \"./TextInput.css\";\r\n// import React from \"react\";\r\n// import ContentEditable from \"react-contenteditable\";\r\n\r\nconst TextBinInput = ({onChange,value}) => {\r\n    return (\r\n        <input\r\n            className=\"textinput bin\"\r\n            type=\"text\"\r\n            value = {value}\r\n            onChange = {onChange}\r\n        >\r\n        </input>\r\n            \r\n    );\r\n}\r\n\r\nexport default TextBinInput; ","export const reverseStr = (s) => {\r\n    return s.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nconst customDiv = (i,div) => {\r\n    return [Math.floor(i/div),i%div];\r\n}\r\n\r\nconst longDiv = (s,base,div,spc) => {\r\n    let r = \"\"\r\n    let q = \"\"\r\n    for (let i=0; i<s.length;i+=spc){\r\n        const ori_s = s.substring(i,i+spc);\r\n        const _s = r + ori_s;\r\n        const [_q,_r] = customDiv(parseInt(_s,base),div)\r\n        // console.log(\"longdiv\",_q,_r)\r\n        if (q.length == 0)\r\n            q += _q.toString(base)\r\n        else\r\n            q += _q.toString(base).padStart(ori_s.length,\"0\");\r\n        r = _r.toString(base);\r\n    }\r\n    return [q,parseInt(r,base).toString(div)]\r\n}\r\n\r\nconst convBase2to16 = (s) => {\r\n    let ret = \"\";\r\n    for (let i=0; i<s.length;i+=4){\r\n        const _s = s.substring(s.length-i-4,s.length-i);\r\n        ret += parseInt(_s,2).toString(16);\r\n    }\r\n    return reverseStr(ret);\r\n}\r\n\r\nconst convBase16to2 = (s) => {\r\n    let ret = \"\";\r\n    for (let i=0; i<s.length;i+=1){\r\n        const _s = s.substring(i,i+1);\r\n        ret += parseInt(_s,16).toString(2).padStart(4,\"0\");\r\n        console.log(_s,ret)\r\n    }\r\n    return ret;\r\n}\r\n\r\n\r\nconst convertBase10to2 = (s) => {\r\n    let ret = \"\"\r\n    const fromBase = 10; const toBase = 2; const SPC = 10;\r\n    while (true) {\r\n        const [q,r] = longDiv(s,fromBase,toBase,SPC);\r\n        // console.log(\"qr convertBase10to2\",q,r)\r\n        s = q;\r\n        ret += r \r\n        if (s.length==1 && parseInt(s,fromBase)===0) {\r\n            break;\r\n        }\r\n    }\r\n    return reverseStr(ret);\r\n}\r\n\r\nconst convertBase10to16 = (s) => {\r\n    let ret = \"\"\r\n    const fromBase = 10; const toBase = 16; const SPC = 10;\r\n    while (true) {\r\n        const [q,r] = longDiv(s,fromBase,toBase,SPC);\r\n        // console.log(\"qr convertBase10to16\",q,r)\r\n        s = q;\r\n        ret += r \r\n        if (s.length==1 && parseInt(s,fromBase)===0) {\r\n            break;\r\n        }\r\n    }\r\n    return reverseStr(ret);\r\n}\r\n\r\nconst convBase2to10 = (s) => {\r\n    let ret = \"\"\r\n    const fromBase = 2; const toBase = 10; const SPC = 40;\r\n    while (true) {\r\n        const [q,r] = longDiv(s,fromBase,toBase,SPC);\r\n        // console.log(\"convBase2to10 qr\",q,r)\r\n        s = q;\r\n        ret += r \r\n        if (s.length==1 && parseInt(s,fromBase)===0) {\r\n            break;\r\n        }\r\n    }\r\n    return reverseStr(ret);\r\n}\r\n\r\nconst convBase16to10 = (s) => {\r\n    let ret = \"\"\r\n    const fromBase = 16; const toBase = 10; const SPC = 10;\r\n    while (true) {\r\n        const [q,r] = longDiv(s,fromBase,toBase,SPC);\r\n        // console.log(\"qr\",q,r)\r\n        s = q;\r\n        ret += r \r\n        if (s.length==1 && parseInt(s,fromBase)===0) {\r\n            break;\r\n        }\r\n    }\r\n    return reverseStr(ret);\r\n}\r\n\r\n// function that converts str from one base to another\r\n// TODO: this function may need further uppdates to deal with integers\r\n// that are with higher number of bits (i.e. higher than JS 53 bits)\r\n// DONE\r\nconst convertNumber = (s,fromBase,toBase,trimHeadZero=false,needRev=false) => {\r\n\r\n    if (needRev) {\r\n        s = reverseStr(s);\r\n    }\r\n\r\n    if (fromBase===toBase) {\r\n        // no need to change if fromBase===toBase\r\n        return  (trimHeadZero) ? s.replace(/^0+/, '') :  s;\r\n    }\r\n\r\n    if (fromBase===2){\r\n        switch (toBase) {\r\n            case 10:\r\n                return (trimHeadZero) ? convBase2to10(s).replace(/^0+/, '') : convBase2to10(s);\r\n            case 16:\r\n                return (trimHeadZero) ? convBase2to16(s).replace(/^0+/, '') : convBase2to16(s);\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    if (fromBase===16) {\r\n        switch(toBase){\r\n            case 2:\r\n                return (trimHeadZero) ? convBase16to2(s).replace(/^0+/, '') : convBase16to2(s);\r\n            case 10:\r\n                return (trimHeadZero) ? convBase16to10(s).replace(/^0+/, '') : convBase16to10(s);\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    if (fromBase===10) {\r\n        switch(toBase){\r\n            case 2:\r\n                return (trimHeadZero) ? convertBase10to2(s).replace(/^0+/, '') : convertBase10to2(s);\r\n            case 16:\r\n                return (trimHeadZero) ? convertBase10to16(s).replace(/^0+/, '') : convertBase10to16(s);\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return parseInt(s, fromBase).toString(toBase);\r\n}\r\n\r\nexport default convertNumber;","import \"./InputForm.css\";\r\nimport React, { useState } from \"react\"; // try use state hook\r\nimport TextHexInput from \"./input_form/TextHexInput\";\r\nimport TextDecInput from './input_form/TextDecInput';\r\nimport TextBinInput from './input_form/TextBinInput';\r\nimport convertNumber from \"./utils/integerConversion\";\r\n\r\n\r\nfunction InputForm({convInput,setConvInput}) {\r\n\r\n    const HEX_INPUT_NAME = \"HEX Input\";\r\n    const DEC_INPUT_NAME = \"DEC Input\";\r\n    const BIN_INPUT_NAME = \"BIN Input\";\r\n\r\n    const CHAR_LIMIT = {\r\n        2: 128,\r\n        10: 39,\r\n        16: 32\r\n    }\r\n\r\n    const INPUT_VALIDATION_FUNC = {\r\n        2: s => /^[0-1]+$/.test(s),\r\n        10: s => /^[0-9]+$/.test(s),\r\n        16: s => /^[a-fA-F0-9]+$/.test(s)\r\n    }\r\n\r\n    const emptyErrMssg = {2:\"\",10:\"\",16:\"\"};\r\n\r\n    let [inputstr, setInput] = useState({\r\n        inputBase: void 0, //undefined inputBase as default\r\n        inputcontent: \"\",\r\n        isValidInput: false,\r\n        errMssg: emptyErrMssg,\r\n    });\r\n\r\n    \r\n\r\n    // function that checks input in case invalid\r\n    // return converted input and err mssg\r\n    const checkConvInput = (s,base) => {\r\n        const maxlength = CHAR_LIMIT[base];\r\n        const validateFunc = INPUT_VALIDATION_FUNC[base];\r\n\r\n        // customize maxlength\r\n        if (typeof s === 'string') {\r\n            \r\n            //remove space in string\r\n            s = s.replace(/\\s+/g, '').trim();\r\n\r\n            if (s.length === 0){\r\n                // empty string\r\n                setConvInput({2:\"\",10:\"\",16:\"\"});\r\n                return [\"\",\"\",false];\r\n            } else if (s.length > maxlength) {\r\n                // max length is reached\r\n                s = s.substring(0,maxlength);\r\n                if (validateFunc(s) && !isNaN(parseInt(s,base))) {\r\n                    return [s,`max length ${maxlength} is reached`,true];\r\n                } else {\r\n                    setConvInput({2:\"\",10:\"\",16:\"\"});\r\n                    return [s,\"Invalid input\",false];\r\n                }\r\n            } else {\r\n                // within valid length\r\n                // check whether input is valid, and can be parsed to int at the desired base\r\n                console.log(\"[debug] parseInt\",s,base,isNaN(parseInt(s,base)),validateFunc(s));\r\n                if (validateFunc(s) && !isNaN(parseInt(s,base))) {\r\n                    let newConvInput = {};\r\n                    newConvInput[2] = convertNumber(s,base,2);\r\n                    newConvInput[10] = convertNumber(s,base,10);\r\n                    newConvInput[16] = convertNumber(s,base,16);\r\n                    setConvInput(newConvInput);\r\n                    return [s,\"\",true];\r\n                } else {\r\n                    setConvInput({2:\"\",10:\"\",16:\"\"});\r\n                    return [s,\"Invalid input\",false];\r\n                }\r\n            }\r\n        }\r\n        return [\"\",\"non-string input\",false];\r\n    }\r\n\r\n    // function that displays converted input\r\n    const convertNumberHelper = (isValidInput, s, fromBase, toBase) => {\r\n        console.log('[debug] convertNumber',inputstr);\r\n\r\n        // valid input\r\n        if (fromBase !== void 0 && isValidInput) {\r\n            const _convInput = convInput[toBase];\r\n            return _convInput;\r\n        }\r\n        // invalid input, only display in original base input\r\n        return (fromBase===toBase) ? s : \"\";\r\n    }\r\n\r\n    // function that handles conversion between hex dec bin\r\n    const customHandleChange = (inbase) => {\r\n        \r\n        const handleChange = (evt) => {\r\n            let ret = checkConvInput(evt.target.value,inbase);\r\n\r\n            let _errMssg = { ...emptyErrMssg };\r\n            _errMssg[inbase] = ret[1];\r\n\r\n            setInput({\r\n                ...inputstr,\r\n                inputBase: inbase,\r\n                inputcontent: ret[0],\r\n                isValidInput: ret[2],\r\n                errMssg: _errMssg\r\n            });\r\n            console.log(\"[debug] InputForm.js handle change: \"+inputstr.inputcontent,inbase);\r\n        };\r\n        return handleChange;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className=\"input-form\">\r\n            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                <label className=\"input-label\">{HEX_INPUT_NAME}\r\n                    <TextHexInput \r\n                        onChange={customHandleChange(16)}\r\n                        value={convertNumberHelper(inputstr.isValidInput,inputstr.inputcontent,inputstr.inputBase,16)}>\r\n                    </TextHexInput>\r\n                    <div className=\"input-err\">{inputstr.errMssg[16]}</div>\r\n                </label>\r\n                <label className=\"input-label\">{DEC_INPUT_NAME}\r\n                    <TextDecInput\r\n                        onChange={customHandleChange(10)}\r\n                        value={convertNumberHelper(inputstr.isValidInput,inputstr.inputcontent,inputstr.inputBase,10)}>\r\n                    </TextDecInput>\r\n                    <div className=\"input-err\">{inputstr.errMssg[10]}</div>\r\n                </label>\r\n                <label className=\"input-label\">{BIN_INPUT_NAME}\r\n                    <TextBinInput\r\n                        onChange={customHandleChange(2)}\r\n                        value={convertNumberHelper(inputstr.isValidInput,inputstr.inputcontent,inputstr.inputBase,2)}>\r\n                    </TextBinInput>\r\n                    <div className=\"input-err\">{inputstr.errMssg[2]}</div>\r\n                </label>\r\n            </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InputForm;\r\n\r\n","import React from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nfunction BgTable({ columns, data }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable({\r\n      columns,\r\n      data,\r\n    });\r\n\r\n  return (\r\n    <table {...getTableProps()} style={{marginBottom:\"3vh\",textAlign:\"center\"}}>\r\n        <thead style={{width:\"15px\"}}>\r\n            {headerGroups.map((headerGroups) => (\r\n                <tr {...headerGroups.getHeaderGroupProps()} >\r\n                    {headerGroups.headers.map((column) => (\r\n                        <th {...column.getHeaderProps()}> {column.render(\"Header\")} </th>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n                <tr {...row.getRowProps()}>\r\n                    \r\n                {row.cells.map((cell) => {\r\n                    \r\n                    if (cell.value !== void 0) {\r\n                        let customCellSPan = (cell.value !== void 0 && \"span\" in cell.value) ? cell.value[\"span\"] : 0;\r\n                        // console.log(\"[debug] gen cell\",cell,customCellSPan)\r\n                        return <td {...cell.getCellProps({colSpan : customCellSPan})}  >{cell.render(\"Cell\")}</td>;\r\n                    } else {\r\n                        return (null);\r\n                    }\r\n                })}\r\n                </tr>\r\n            );\r\n            })}\r\n        </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default BgTable;","import React, { useState } from \"react\";\r\n\r\nexport default function DivisionSymbol ({colIndex,isAllowChange,divCol,setDivCol}) {\r\n\r\n    const oriColor = \"white\";\r\n    const highlightColor = \"red\";\r\n\r\n    const changeColor = () => {\r\n\r\n        console.log(\"[debug] click change color\",divCol[colIndex])\r\n\r\n        let _divCol = {};\r\n        _divCol[colIndex] = divCol[colIndex] === 0 ? 1 : 0;\r\n        setDivCol(prevState => ({ ...prevState, ..._divCol }));\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='division-symbol'\r\n                style={{ color: isAllowChange ? ((divCol[colIndex]===1) ? \"red\" : \"white\") : \"red\" }}\r\n                onClick={isAllowChange  ? changeColor : void 0}\r\n            >\r\n                ||\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState } from \"react\";\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\r\n\r\nconst ToggleButtons = ({displayBitform,setDisplayBitform,setPrevDBF}) => {\r\n\r\n    const handleChange = (e,val) => {\r\n        setDisplayBitform(preval=>{setPrevDBF(preval);return val;});\r\n    }\r\n\r\n    const toggleBackground = (val) => {\r\n        return val===displayBitform ? \"grey\" : \"#D3D3D3\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToggleButtonGroup\r\n                exclusive\r\n                aria-label=\"text alignment\"\r\n                onChange={(e,val) => handleChange(e,val)}\r\n                \r\n            >\r\n                <ToggleButton value=\"16bit\" style={{background:toggleBackground(\"16bit\")}}>\r\n                    16\r\n                </ToggleButton>\r\n                <ToggleButton value=\"32bit\" style={{background:toggleBackground(\"32bit\")}}>\r\n                    32\r\n                </ToggleButton>\r\n                <ToggleButton value=\"64bit\" style={{background:toggleBackground(\"64bit\")}}>\r\n                    64\r\n                </ToggleButton>\r\n                <ToggleButton value=\"128bit\" style={{background:toggleBackground(\"128bit\")}}>\r\n                    128\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </>\r\n    );\r\n        \r\n}\r\n\r\nexport const convDisplayBitform = (displayBitform) => {\r\n    switch(displayBitform) {\r\n        case \"16bit\":\r\n            return 16;\r\n        case \"32bit\":\r\n            return 32;\r\n        case \"64bit\":\r\n            return 64;\r\n        case \"128bit\":\r\n            return 128;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ToggleButtons;","import \"./DisplayBoard.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport BgTable from \"./display_board/BackgroundTable\"\r\nimport DivisionSymbol from \"./display_board/DivisionSymbol\"\r\nimport convertNumber, {reverseStr} from \"./utils/integerConversion\";\r\nimport ToggleButtons, {convDisplayBitform} from \"./display_board/ToggleButtons\";\r\nimport { ScrollView } from 'react-native';\r\n\r\n\r\nconst rowInfoEnum = Object.freeze({ \"bitrnginfo\": 0, \"name\": 1, \"default\": 2, \"hexform\": 3, \"decform\": 4, \"bitform\": 5, \"rowlen\": 6 })\r\nconst COL_NUM_PER_ROW = 16;\r\nconst ROW_MAX_SPAN = COL_NUM_PER_ROW*2+1;\r\nconst STARTING_COL_IDX = 0;\r\n\r\nexport const isAllowChange = (colIndex,limitIndex) => {\r\n    return colIndex !== 0 && colIndex !== limitIndex;\r\n}\r\n\r\nconst initDivCol = (bitform) => {\r\n    const divDict = {};\r\n    for (let colIndex=0; colIndex<=convDisplayBitform(bitform); colIndex++){\r\n        divDict[colIndex] = isAllowChange(colIndex,convDisplayBitform(bitform)) ? 0 : 1;\r\n    }\r\n    return divDict;\r\n}\r\n\r\n\r\nfunction DisplayBoard({ convInput, selItem }) {\r\n\r\n    \r\n    // const ENDING_COL_NUM = 16;\r\n\r\n    const [divCol, setDivCol] = useState(initDivCol(\"128bit\"));\r\n    const [displayBitform,setDisplayBitform] = useState(\"16bit\");\r\n    const [prevDBF,setPrevDBF] = useState(\"\");\r\n\r\n    const getUpdateDivCol  = (_divCol,renew=false) => {\r\n        let updateDivCol = {};\r\n\r\n        for (const [colIdx,val] of Object.entries(_divCol)) {\r\n            updateDivCol[colIdx] = isAllowChange(parseInt(colIdx),convDisplayBitform(displayBitform)) ? ((renew) ? 0 : (!isAllowChange(parseInt(colIdx),convDisplayBitform(prevDBF)) ? 0 : val)) : 1;\r\n        }\r\n\r\n        for (const [_,value] of Object.entries(selItem.fields)) {\r\n            const tailPos = value.position[0];\r\n            const frontPos = value.position[1];\r\n            \r\n            if (frontPos in _divCol) {\r\n                updateDivCol[frontPos] = 1;\r\n            }\r\n            if (parseInt(tailPos)+1 in _divCol) {\r\n                \r\n                updateDivCol[parseInt(tailPos)+1] = 1;\r\n            }\r\n            console.log(\"sel pos\",value,tailPos,frontPos,updateDivCol,tailPos+1 in _divCol,frontPos in _divCol)\r\n        }\r\n        return updateDivCol;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const updateDivCol = getUpdateDivCol(divCol);\r\n        // import old results if it is less than new max\r\n        // for (let i=STARTING_COL_IDX;i<=convDisplayBitform(displayBitform);i++) {\r\n        //     if(i in divCol){\r\n        //         _divCol[i] = divCol[i];\r\n        //     } else {\r\n        //         _divCol[i] = 0;\r\n        //     }\r\n        // }\r\n        // // set ending col\r\n        // if (convDisplayBitform(prevDBF) in _divCol){\r\n        //     _divCol[convDisplayBitform(prevDBF)] = 0;\r\n        // }\r\n        // if (convDisplayBitform(displayBitform) in _divCol) {\r\n        //     _divCol[convDisplayBitform(displayBitform)] = 1;\r\n        // }\r\n        // console.log(\"[debug] updatedivCol Bitform\",_divCol,prevDBF,displayBitform);\r\n        console.log(\"[debug] !!!updateDivCol <displayBitform>\",updateDivCol)\r\n        setDivCol({...updateDivCol});\r\n\r\n\r\n    },[displayBitform])\r\n\r\n\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n        // console.log(\"sel item changed divCol\",divCol);\r\n        const updateDivCol = getUpdateDivCol(divCol,true);\r\n        console.log(\"[debug] !!!updateDivCol <selItem>\",updateDivCol)\r\n        setDivCol({...updateDivCol});\r\n\r\n    },[selItem]);\r\n\r\n    \r\n\r\n    const genDivSym = (colIndex) => {\r\n\r\n        // console.log(\"genDivSym\",colIndex,displayBitform,isAllowChange(colIndex,convDisplayBitform(displayBitform)))\r\n\r\n        return {\r\n            Header: <DivisionSymbol colIndex={colIndex} isAllowChange={isAllowChange(colIndex,convDisplayBitform(displayBitform))} divCol={divCol}  setDivCol={setDivCol} />,\r\n            accessor: \"div\" + colIndex.toString(),\r\n            Cell: (props) => {\r\n                if (props.cell.value !== void 0) {\r\n                    return (\r\n                        <div className='division-symbol' style={{ color: \"white\" }}>\r\n                            {(props.cell.value !== void 0 && \"strform\" in props.cell.value) ? props.cell.value[\"strform\"] : \"\"}\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (null);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    const getCol = (startIdx, endIdx) => {\r\n        let ret = [];\r\n        let div = true;\r\n        let i = startIdx;\r\n        let j = startIdx;\r\n\r\n        while (i < endIdx) {\r\n\r\n            if (div) {\r\n                let divSymDict = genDivSym(j);\r\n                ret.push(divSymDict);\r\n                j++;\r\n                div = false;\r\n            } else {\r\n                ret.push({\r\n                    Header: (() => (\r\n                        <div style={{\r\n                            textAlign: \"center\",\r\n                            fontSize: \"medium\",\r\n                            color: \"#FEC20C\",\r\n                            width: \"35px\",\r\n                            marginLeft: \"5px\",\r\n                            marginRight: \"5px\"\r\n                        }}>{i.toString()}</div>\r\n                    ))(),\r\n                    accessor: \"col\" + i.toString(),\r\n                    Cell: (props) => {\r\n\r\n                        if (props.cell.value !== void 0) {\r\n                            return (\r\n                                <div style={{ color: (props.cell.value !== void 0 && \"color\" in props.cell.value) ? props.cell.value[\"color\"] : \"white\", fontSize: \"large\" }}>\r\n                                    {(props.cell.value !== void 0 && \"strform\" in props.cell.value) ? props.cell.value[\"strform\"] : \"\"}\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return (null);\r\n                        }\r\n                    }\r\n                });\r\n                i++;\r\n                div = true;\r\n            }\r\n\r\n            if (i === endIdx) {\r\n                // add last div\r\n                let divSymDict = genDivSym(j);\r\n                ret.push(divSymDict);\r\n            }\r\n\r\n        }\r\n\r\n        ret.reverse();\r\n\r\n        return ret;\r\n    }\r\n\r\n    const getData = () => {\r\n\r\n        const adjustSpan = (span) => { return span * 2 - 1 };\r\n        const frontTailIdx = (i, prev_i) => { return { f: prev_i, t: i - 1 } };\r\n        const getRowNum = (idx) => parseInt(Math.max(0,(idx-1)/(COL_NUM_PER_ROW)));\r\n        // const getRowNumDiv = (idx) => parseInt(idx/(COL_NUM_PER_ROW+2));\r\n        const initRowCumSpan = () => {\r\n            let ret = {};\r\n            for (let i = STARTING_COL_IDX; i < convDisplayBitform(displayBitform)/COL_NUM_PER_ROW; i++) {\r\n                ret[i] = 1;\r\n            }\r\n            return ret;\r\n        };\r\n        // create dict to match by position\r\n        const posDict = {};\r\n        const defDict = {};\r\n\r\n        for (const [key,value] of Object.entries(selItem.fields)) {\r\n            const frontPos = value.position[1];\r\n            const tailPos = value.position[0];\r\n            if (frontPos in divCol) {\r\n                posDict[frontPos] = key;\r\n            }\r\n            if (value.default.length > 0) {\r\n                let index=1;\r\n                for (let i=frontPos; i<=tailPos; i++) {\r\n                    if (value.default.length-index>=0) {\r\n                        defDict[i] = value.default[value.default.length-index];\r\n                    }\r\n                    index++;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        let ret = [];\r\n\r\n        // shows subcode in range and length e.g. [0:6] (7)\r\n        // shows subcode in name e.g. ?\r\n        // shows subcode in hex form\r\n        // shows subcode in dec form\r\n        // shows subcode in bit form\r\n        \r\n\r\n        const revConvInput = reverseStr(convInput[2]);\r\n        console.log(\"[debug] convInput[2]???\",convInput[2],revConvInput)\r\n\r\n        for (let r = 0; r < rowInfoEnum.rowlen; r++) {\r\n            // console.log(\"------------------r-------------------\",r)\r\n            let tempData = {};\r\n            let prev_i = void 0;\r\n            let rowCumSpan = initRowCumSpan();\r\n            \r\n            tempData[\"div\"+STARTING_COL_IDX.toString()] = { strform: \"||\", span: 1 };\r\n\r\n            for (let i = STARTING_COL_IDX; i <= convDisplayBitform(displayBitform); i++) {\r\n                \r\n                switch (r) {\r\n                    case rowInfoEnum.bitrnginfo:\r\n                    case rowInfoEnum.name:\r\n                    \r\n                    case rowInfoEnum.hexform:\r\n                    case rowInfoEnum.decform:\r\n\r\n                        if (divCol[i] === 1) {\r\n                            if (prev_i !== void 0) {\r\n                                \r\n                                const span = (getRowNum(i) === getRowNum(prev_i)) ? \r\n                                    (i - prev_i) : \r\n                                    i - COL_NUM_PER_ROW * getRowNum(i);\r\n                                // console.log(\"calSpan\",span,\"i\",i,\"pi\",prev_i,getRowNum(i),getRowNum(prev_i))\r\n\r\n                                let strform = \"\";\r\n                                const bitIdx = frontTailIdx(i, prev_i);\r\n                                const bitstrform =\r\n                                    (typeof revConvInput === 'string' && revConvInput.length > 0) ?\r\n                                    revConvInput.substring(bitIdx.f, bitIdx.t + 1) : \"\";\r\n                                console.log(\"[debug] bitstrform???\",bitstrform,bitIdx)\r\n                                switch (r) {\r\n                                    case rowInfoEnum.bitrnginfo:\r\n                                        strform = `[${bitIdx.t}:${bitIdx.f}] (${1+bitIdx.t-bitIdx.f})`;\r\n                                        break;\r\n                                    case rowInfoEnum.name:\r\n                                        strform = bitIdx.f in posDict ? posDict[bitIdx.f] : \"?\"; //placeholder\r\n                                        break;\r\n                                    case rowInfoEnum.hexform:\r\n                                        strform = bitstrform.length > 0 ? \"0x\"+convertNumber(bitstrform, 2, 16, true, true) : \"\"; //placeholder\r\n                                        break;\r\n                                    case rowInfoEnum.decform:\r\n                                        strform = bitstrform.length > 0 ? convertNumber(bitstrform, 2, 10, true, true) : \"\"; //placeholder\r\n                                        break;\r\n\r\n                                }\r\n                                console.log(\"[debug] bitrnginfo col\" + (i - 1).toString(), \"span\", span, \"prev_i\", prev_i, \"adj span\", adjustSpan(span))\r\n\r\n                                tempData[\"col\" + (i - 1).toString()] = {\r\n                                    strform: strform,\r\n                                    span: adjustSpan(span)\r\n                                };\r\n                                tempData[\"div\" + (i).toString()] = { strform: \"||\", span: 1 };\r\n                                rowCumSpan[getRowNum(i)] += adjustSpan(span) + 1;\r\n                            }\r\n                            prev_i = i;\r\n                        }\r\n                        break;\r\n\r\n                    case rowInfoEnum.bitform:\r\n                        if (prev_i !== void 0) {\r\n\r\n                            const strform = revConvInput.substring(i - 1, i); //placeholder\r\n                            const span = 1;\r\n\r\n                            tempData[\"col\" + (i - 1).toString()] = {\r\n                                strform: strform,\r\n                                span: span\r\n                            };\r\n\r\n                            tempData[\"div\" + (i).toString()] = { strform: divCol[i] === 1 ? \"||\" : \"\", span: 1 };\r\n                            rowCumSpan[getRowNum(i)] += span + 1;\r\n                        }\r\n                        if (divCol[i] === 1) {\r\n                            prev_i = i;\r\n                        }\r\n                        break;\r\n                    case rowInfoEnum.default:\r\n                        if (prev_i !== void 0) {\r\n\r\n                            const strform = (i - 1) in defDict ? defDict[i - 1] : \"\"; //placeholder\r\n                            const inputStrform = revConvInput.substring(i - 1, i);\r\n                            const span = 1;\r\n\r\n                            tempData[\"col\" + (i - 1).toString()] = {\r\n                                strform: strform.length > 0 ? '\"'+strform+'\"' : strform,\r\n                                span: span,\r\n                                color: inputStrform == strform ? \"white\" : \"red\"\r\n                            };\r\n\r\n                            tempData[\"div\" + (i).toString()] = { strform: divCol[i] === 1 ? \"||\" : \"\", span: 1 };\r\n                            rowCumSpan[getRowNum(i)] += adjustSpan(span) + 1;\r\n                        }\r\n                        if (divCol[i] === 1) {\r\n                            prev_i = i;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n            for (let j = STARTING_COL_IDX; j < convDisplayBitform(displayBitform)/COL_NUM_PER_ROW; j++) {\r\n                if (rowCumSpan[j] < ROW_MAX_SPAN) {\r\n                    tempData[\"div\"+((j+1)*COL_NUM_PER_ROW).toString()] = { strform: \"...\", span: ROW_MAX_SPAN-rowCumSpan[j]};\r\n                    rowCumSpan[j] += ROW_MAX_SPAN-rowCumSpan[j];\r\n                    // console.log(\"addadd\",\"div\"+((j+1)*COL_NUM_PER_ROW).toString(),ROW_MAX_SPAN-rowCumSpan[j])\r\n                }\r\n                if(rowCumSpan[j]>ROW_MAX_SPAN){\r\n                    console.error(\"err: larger than max span\",j,rowCumSpan[j],ROW_MAX_SPAN);\r\n                }\r\n            }\r\n            console.log(\"[debug] rowCumSpan\",rowCumSpan)\r\n            console.log(\"[debug] tempData\",tempData,divCol)\r\n            ret.push(tempData);\r\n        }\r\n\r\n\r\n\r\n        return ret;\r\n    }\r\n\r\n    const data = React.useMemo(\r\n        () => getData(),\r\n        [divCol, convInput]\r\n    );\r\n\r\n    const genBgTable = () => {\r\n        const ret = [];\r\n        for (let i=0; i<convDisplayBitform(displayBitform)/COL_NUM_PER_ROW;i++){\r\n            ret.push(<BgTable key={i} className=\"display-bgtable\" columns={getCol(STARTING_COL_IDX+i*COL_NUM_PER_ROW, COL_NUM_PER_ROW+i*COL_NUM_PER_ROW)} data={data} />);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                < ToggleButtons className=\"display-togglebtns\" displayBitform={displayBitform} setDisplayBitform={setDisplayBitform} setPrevDBF={setPrevDBF}/>\r\n            </div>\r\n            <ScrollView className=\"bg-table-view\" style={{ height: \"40vh\", marginTop:\"3vh\" }} persistentScrollbar={true}>\r\n                {genBgTable()}\r\n            </ScrollView>\r\n            \r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default DisplayBoard;","export const checkInstrFormat = (instr) => {\r\n    \r\n    if (!(\"key\" in instr)){\r\n        throw \"err: some instr has no key\";\r\n    }\r\n\r\n    if (!Number.isInteger(instr.key)){\r\n        throw \"err: some instr's key is not integer\";\r\n    }\r\n\r\n    if (instr.key === -1){\r\n        throw \"err: key -1 is reserved\";\r\n    }\r\n\r\n    if (!(\"name\" in instr)){\r\n        throw \"err: some instr has no name\";\r\n    }\r\n\r\n    if (typeof instr.name !== 'string'){\r\n        throw \"err: some instr's name is not string\";\r\n    }\r\n\r\n    if (!(\"strformat\" in instr)){\r\n        throw \"err: some instr has no strformat\";\r\n    }\r\n\r\n    if (typeof instr.strformat !== 'string'){\r\n        throw \"err: some instr's strformat is not string\";\r\n    }\r\n\r\n    if (!(\"fields\" in instr)){\r\n        throw \"err: some instr has no fields\";\r\n    }\r\n\r\n    if (typeof instr.fields !== \"object\"){\r\n        throw \"err: some instr's fields is not dict\";\r\n    }\r\n\r\n    var posSet = new Set();\r\n\r\n    for (const [key, value] of Object.entries(instr.fields)) {\r\n        \r\n        if (typeof key !== 'string'){\r\n            throw \"err: some instr's field's key is not string\";\r\n        }\r\n\r\n        if (!(\"default\" in value)){\r\n            throw \"err: some instr's field has no default\";\r\n        }\r\n\r\n        if (typeof value.default !== 'string'){\r\n            throw \"err: some instr's field's default is not string\";\r\n        }\r\n\r\n        if (!(\"position\" in value)){\r\n            throw \"err: some instr's field has no position\";\r\n        }\r\n\r\n        if (!Array.isArray(value.position)){\r\n            throw \"err: some instr's field's position is not array\";\r\n        }\r\n\r\n        if (value.position.length !== 2){\r\n            throw \"err: some instr's field's position does not have length of 2\";\r\n        }\r\n\r\n        const tailPos = value.position[0];\r\n        const frontPos = value.position[1];\r\n\r\n        if (!Number.isInteger(tailPos)){\r\n            throw `err: some instr's field's position tailPos ${tailPos} is not integer`;\r\n        }\r\n\r\n        if (!Number.isInteger(frontPos)){\r\n            throw `err: some instr's field's position frontPos ${frontPos} is not integer`;\r\n        }\r\n\r\n        if (tailPos < 0){\r\n            throw `err: some instr's field's position tailPos ${tailPos} is negative`;\r\n        }\r\n\r\n        if (frontPos < 0){\r\n            throw `err: some instr's field's position frontPos ${frontPos} is negative`;\r\n        }\r\n\r\n        if (!(tailPos>=frontPos)){\r\n            throw `err: some instr's field's position tail pos ${tailPos} is smaller than ${frontPos}`;\r\n        }\r\n\r\n        if (value.default.length>0) {\r\n            if (tailPos-frontPos+1 !== value.default.length){\r\n                throw \"err: some instr's field's position length does not match default's length\";\r\n            }\r\n        }\r\n\r\n        if (tailPos===frontPos){\r\n            if (posSet.has(tailPos)) {\r\n                throw `err: repeated pos found: ${tailPos}`;\r\n            }\r\n            posSet.add(tailPos);\r\n        } else {\r\n            for(let i=frontPos;i<=tailPos;i++){\r\n                if (posSet.has(i)) {\r\n                    throw `err: repeated pos found: ${i}`;\r\n                }\r\n                posSet.add(i);\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport const checkInstrListFormat = (instrList) => {\r\n    \r\n    var keySet = new Set();\r\n\r\n    console.log(instrList,instrList.length);\r\n    \r\n    for (const instr of instrList) {\r\n\r\n        checkInstrFormat(instr);\r\n\r\n        if (keySet.has(instr.key)) {\r\n            throw \"err: repeated key found in instr list\";\r\n        }\r\n        keySet.add(instr.key);\r\n    }\r\n\r\n    return true;\r\n     \r\n}\r\n\r\n\r\nexport const genDefInstr = () => {\r\n    return {\r\n        key: -1,\r\n        name: \"unnamed\",\r\n        strformat: \"\",\r\n        match: [],\r\n        fields: {\r\n        } \r\n    };\r\n}\r\n\r\n\r\nexport const createDefList = () => {\r\n    const defListItems = [];\r\n\r\n    defListItems.push(genDefInstr());\r\n\r\n    defListItems.push({\r\n        key: 0,\r\n        name: \"LDR\",\r\n        strformat: \"LDR <Wt>, [<Xn|SP>, (<Wm>|<Xm>){, <extend> {<amount>}}]\",\r\n        match: [\"31\",\"opc\",\"11\",\"10\"],\r\n        fields: {\r\n            31: {default:\"1\",position:[31,31]},\r\n            size: {default:\"0\",position:[30,30]},\r\n            opc: {default:\"111000011\",position:[29,21]}, \r\n            Rm: {default:\"\",position:[20,16]}, \r\n            option: {default:\"\",position:[15,13]},\r\n            S: {default:\"\",position:[12,12]},\r\n            11: {default:\"1\",position:[11,11]},\r\n            10: {default:\"0\",position:[10,10]},\r\n            Rn: {default:\"\",position:[9,5]},\r\n            Rt: {default:\"\",position:[4,0]},\r\n        } \r\n    })\r\n\r\n    defListItems.push({\r\n        key: 1,\r\n        name: \"STR\",\r\n        strformat: \"STR <Wt>, [<Xn|SP>], #<simm>\",\r\n        match: [\"31\",\"opc\",\"11\",\"10\"],\r\n        fields: {\r\n            31: {default:\"1\",position:[31,31]}, \r\n            size: {default:\"0\",position:[30,30]}, \r\n            opc: {default:\"111000000\",position:[29,21]}, \r\n            imm9: {default:\"\",position:[20,12]}, \r\n            11: {default:\"0\",position:[11,11]},\r\n            10: {default:\"1\",position:[10,10]},\r\n            Rn: {default:\"\",position:[9,5]},\r\n            Rt: {default:\"\",position:[4,0]},\r\n        } \r\n    })\r\n\r\n\r\n    return defListItems;\r\n}","import {genDefInstr,checkInstrListFormat} from \"./DefaultInstr\";\r\n\r\nexport const createList = (instrList) => {\r\n    \r\n    const ret = [];\r\n    ret.push(genDefInstr());\r\n    const checkRet = checkInstrListFormat(instrList.instr_list);\r\n    console.log('[debug] instr list checkRet',checkRet);\r\n    for (const instr of instrList.instr_list) {\r\n        ret.push(instr);\r\n    }\r\n    return ret;\r\n};\r\n\r\nexport const creatJson = (instrList) => {\r\n    instrList.shift(); // remove the default instr at top\r\n    const ret = {\"instr_list\":instrList};\r\n    return ret;\r\n}","import React, { useState } from \"react\";\r\nimport Popup from \"reactjs-popup\";\r\nimport {\r\n    FlatList,\r\n    View,\r\n    TouchableOpacity,\r\n    ScrollView\r\n} from 'react-native'\r\nimport \"./InstrEditPopup.css\";\r\nimport { genDefInstr, checkInstrFormat } from \"./DefaultInstr\"\r\n\r\nconst convFieldsToList = (fields) => {\r\n\r\n    let rows = [];\r\n    \r\n    for (const [key, value] of Object.entries(fields)) {\r\n        rows.push({\r\n            key: key,\r\n            val: value\r\n        });\r\n    }\r\n    \r\n    rows = rows.sort(function(a, b) {\r\n        if (parseInt(a.val.position[1])<parseInt(b.val.position[1])){\r\n            return -1;\r\n        } else if (parseInt(a.val.position[1])>parseInt(b.val.position[1])) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    })\r\n\r\n    for (let count = 0; count<rows.length; count++) {\r\n        rows[count].idx = count;\r\n    }\r\n\r\n    return rows;\r\n} \r\n\r\nexport default ({ selItem, setSelItem, instrList, setInstrList }) => {\r\n    \r\n    const [selFieldIx,setSelFieldIdx] = useState(0);\r\n    const [fieldList,setFieldList] = useState(convFieldsToList(selItem.fields));\r\n\r\n    const handleSubmit = (event,key_id) => {\r\n        event.preventDefault();\r\n        const myFormData = new FormData(event.target);\r\n        // console.log(myFormData);\r\n        \r\n        const formDataObj = {};\r\n        myFormData.forEach((value, key) => (formDataObj[key] = value));\r\n        console.log(\"[debug] formDataObj\",formDataObj);\r\n    \r\n        const ret = genDefInstr()\r\n        ret.key = parseInt(key_id);\r\n\r\n        let field_key_dict = {};\r\n        // create field key dict first\r\n        for (const [key, value] of Object.entries(formDataObj)) {\r\n            if (key.startsWith(\"field_key.\")){\r\n                const k_count = key.replace(\"field_key.\",\"\")\r\n                field_key_dict[k_count] = value;\r\n            }\r\n        }\r\n        // add the rest of the data\r\n        for (const [key, value] of Object.entries(formDataObj)) {\r\n            if (key.startsWith(\"fields.\")){\r\n                if (key.endsWith(\".default\")){\r\n                    const k_count = key.replace(\"fields.\",\"\").replace(\".default\",\"\")\r\n                    const field_key = field_key_dict[k_count];\r\n                    if (!(field_key in ret[\"fields\"])){\r\n                        ret[\"fields\"][field_key] = {};\r\n                    }\r\n                    ret[\"fields\"][field_key].default = value;\r\n                } else {\r\n                    \r\n                    const k_count = key.replace(\"fields.\",\"\").replace(\".position\",\"\")\r\n                    const field_key = field_key_dict[k_count];\r\n                    console.log('ckckck',field_key,key,value)\r\n                    if (!(field_key in ret[\"fields\"])){\r\n                        ret[\"fields\"][field_key] = {};\r\n                    }\r\n                    ret[\"fields\"][field_key].position = value.split(\",\").map(elem=>parseInt(elem));\r\n                }\r\n                \r\n            } else if (key===\"match\") {\r\n                ret[key] = value.split(\",\")\r\n            } else {\r\n                ret[key] = value;\r\n            }\r\n        }\r\n\r\n        console.log(\"[debug] selItem\",ret);\r\n        \r\n        let selIdx = -1;\r\n        for (let i=0; i<instrList.length; i++){\r\n            if (instrList[i].key===ret.key){\r\n                selIdx = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        try{\r\n            checkInstrFormat(ret);\r\n            setSelItem(ret);\r\n            setInstrList(prevInstrList=>{prevInstrList[selIdx]=ret;return prevInstrList;})\r\n        } catch(err){\r\n            alert(err);\r\n            return false;\r\n        }\r\n        return true;\r\n    \r\n    }\r\n    \r\n    const addfield = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"addfield\")\r\n        const newField = {key:'?',val:{default:'',position:[0,0]}}; //genDefInstr();\r\n        const fieldIdxList = [];\r\n        for (const field of fieldList) {\r\n            fieldIdxList.push(parseInt(field.idx));\r\n        }\r\n        // set new instr key to the max key of the list\r\n        newField.idx = Math.max(...fieldIdxList) + 1;\r\n        console.log('newfield',newField);\r\n        setFieldList(fieldList => [newField, ...fieldList]);\r\n    }\r\n\r\n    const delfield = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"delfield\")\r\n        const idxToDelete = selFieldIx;\r\n        setFieldList(fieldList => fieldList.filter(item => item.idx !== idxToDelete));\r\n    }\r\n\r\n\r\n    const createItem = (item) => {\r\n        return (<div key={item.idx}>\r\n                <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                <label className=\"edit-subinput\" > field name </label>\r\n                <input type=\"text\" name={\"field_key.\"+item.idx} defaultValue={item.key} />\r\n                <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                <label className=\"edit-subinput\" > default </label>\r\n                <input type=\"text\" name={\"fields.\"+item.idx+\".default\"} defaultValue={item.val.default} />\r\n                <label className=\"edit-subinput\" > position </label>\r\n                <input type=\"text\" name={\"fields.\"+item.idx+\".position\"} defaultValue={item.val.position} />\r\n                <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n            </div>);\r\n    }\r\n\r\n    const renderSeparator = () => {\r\n        return (\r\n            <View\r\n                style={{\r\n                    height: 1,\r\n                    backgroundColor: '#CED0CE',\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const handleItemClick = (event,item) => {\r\n        event.preventDefault();\r\n        setSelFieldIdx(item.idx);\r\n    };\r\n    \r\n    return (\r\n        <Popup\r\n            trigger={<button className=\"instr-change-button edit\"> edit </button>}\r\n            modal\r\n            nested\r\n        >\r\n            {close => (\r\n                <div className=\"modal\">\r\n                    <button className=\"close\" type=\"button\" onClick={close}>\r\n                        &times;\r\n                    </button>\r\n                    <div className=\"header\"> Edit Instr </div>\r\n                    <form className=\"edit-form\" onSubmit={e => {const subret = handleSubmit(e,selItem.key); if(subret) close();}}>\r\n                        <label className=\"edit-input\" >\r\n                            Name\r\n                        </label>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <input type=\"text\" name=\"name\" defaultValue={selItem.name} />\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <label className=\"edit-input\" >\r\n                            Str Format\r\n                        </label>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <input type=\"text\" name=\"strformat\" defaultValue={selItem.strformat} />\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <label className=\"edit-input\" >\r\n                            Match\r\n                        </label>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <input type=\"text\" name=\"match\" defaultValue={selItem.match} />\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <label className=\"edit-input\" >\r\n                            Fields\r\n                        </label>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <div>\r\n                            <button className=\"button add\" onClick={e=>addfield(e)}>add</button>\r\n                            <button className=\"button del\" onClick={e=>delfield(e)}>del</button>\r\n                        </div>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <ScrollView className=\"field-list-view\" style={{ height: \"30vh\" }} persistentScrollbar={true}>\r\n                            <FlatList\r\n                                className=\"field-list\"\r\n                                data={fieldList}\r\n                                renderItem={({ item }) => (\r\n                                    <TouchableOpacity onPress={(e) => handleItemClick(e,item)} key={item.key} style={{\r\n                                        backgroundColor: item.idx === selFieldIx ? 'salmon' : ''\r\n                                    }}>\r\n                                        {createItem(item)}\r\n                                    </TouchableOpacity>\r\n                                )}\r\n                                numColumns={1}\r\n                                keyExtractor={item => item.idx}\r\n                                ItemSeparatorComponent={renderSeparator}\r\n                            />\r\n                        </ScrollView>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <div className=\"blank\" style={{ margin: '1vh' }} ></div>\r\n                        <div className=\"actions\">\r\n                            <button className=\"button save\" type=\"submit\">\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            )}\r\n        </Popup>\r\n    );\r\n\r\n}","import \"./InstrPanel.css\";\r\nimport React, { useState, useRef } from \"react\"; // try use state hook\r\nimport {\r\n    FlatList,\r\n    View,\r\n    TouchableOpacity,\r\n    ScrollView\r\n} from 'react-native'\r\nimport { genDefInstr, createDefList } from \"./instr_panel/DefaultInstr\"\r\nimport { createList, creatJson } from \"./instr_panel/InstrJsonParser\";\r\nimport InstrEditPopup from './instr_panel/InstrEditPopup';\r\nimport {reverseStr} from \"./utils/integerConversion\";\r\n\r\nfunction InstrPanel({ selItem, setSelItem, convInput }) {\r\n\r\n    // const [selItem, setSelItem] = useState(genDefInstr());\r\n    const [unnameCnt, setUnnameCnt] = useState(1);\r\n    const [instrList, setInstrList] = useState(createDefList());\r\n    const fileRef = useRef();\r\n    const [fileContent, setFileContent] = useState(\"\");\r\n\r\n    const selectItem = (item) => {\r\n        console.log(\"[debug] select item\", item);\r\n        // rename selected item\r\n        setSelItem(item);\r\n    }\r\n\r\n    const clearItem = () => {\r\n        setSelItem(instrList[0])\r\n    }\r\n\r\n    const autoMatchItem = () => {\r\n        let selIndex = -1;\r\n        for (const [index, instr] of instrList.entries()) {\r\n            let match = false;\r\n            for (const [key,val] of Object.entries(instr.fields)) {\r\n                const def = val.default;\r\n                const posT = val.position[0];\r\n                const posH = val.position[1];\r\n                console.log(\"ckck key\",key,instr.match, def.length>0 && key in instr.match)\r\n                if (def.length>0 && instr.match.includes(key)) {\r\n                    console.log(\"[debug] automatch compare\",key,reverseStr(reverseStr(convInput[2]).substring(posH,posT+1)), def, reverseStr(reverseStr(convInput[2]).substring(posH,posT+1)) === def, match)\r\n                \r\n                    if (reverseStr(reverseStr(convInput[2]).substring(posH,posT+1)) === def){\r\n                        match = true;\r\n                    } else {\r\n                        match = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (match===true) {\r\n                selIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        console.log(\"[debug] automatch selIndex\",selIndex)\r\n        if (selIndex===-1){\r\n            alert(\"warning: no match found\");\r\n        }\r\n        setSelItem((selIndex===-1) ? selItem : instrList[selIndex]);\r\n    }\r\n\r\n    const renderSeparator = () => {\r\n        return (\r\n            <View\r\n                style={{\r\n                    height: 1,\r\n                    backgroundColor: '#CED0CE',\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n    const showName = () => {\r\n        return \"name\" in selItem ? selItem[\"name\"] : genDefInstr()[\"name\"]\r\n    }\r\n\r\n    const addNewInstr = () => {\r\n        setUnnameCnt(unnameCnt => unnameCnt + 1);//increm unname cnt\r\n        const newInstr = {...selItem}; //genDefInstr();\r\n        const instrKeyList = [];\r\n        for (const instr of instrList) {\r\n            instrKeyList.push(parseInt(instr.key));\r\n        }\r\n        // set new instr key to the max key of the list\r\n        newInstr.key = Math.max(...instrKeyList) + 1;\r\n        newInstr.name = newInstr.name + \"_\" + unnameCnt.toString();\r\n        setInstrList(instrList => [...instrList, newInstr]);\r\n    }\r\n    \r\n    const delInstr = () => {\r\n        const keyToDelete = selItem.key;\r\n        if (keyToDelete === genDefInstr().key){\r\n            alert(\"err: cannot delete default unnamed instr\");\r\n        } \r\n        setInstrList(instrList => instrList.filter(item => item.key !== keyToDelete));\r\n        setSelItem(genDefInstr());\r\n\r\n    }\r\n\r\n    const handleFileInput = e => {\r\n        setFileContent(e.target.files[0]);\r\n    };\r\n\r\n    const loadFile = () => {\r\n        const fileReader = new FileReader();\r\n        fileReader.readAsText(fileContent, \"UTF-8\");\r\n        fileReader.onload = e => {\r\n            const content = e.target.result;\r\n            let newInstrList = [genDefInstr()];\r\n            try {\r\n                const jsContent = JSON.parse(content);\r\n                newInstrList = createList(jsContent);\r\n            } catch (e) {\r\n                alert(e); // error in the above string (in this case, yes)!\r\n            }\r\n            setInstrList(newInstrList);\r\n\r\n        };\r\n\r\n    }\r\n\r\n    const exportData = () => {\r\n        const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\r\n            JSON.stringify(creatJson(instrList), null, 2)\r\n        )}`;\r\n        const link = document.createElement(\"a\");\r\n        link.href = jsonString;\r\n        link.download = \"instr_list.json\";\r\n\r\n        link.click();\r\n    };\r\n\r\n    const handleItemClick = (event,item) => {\r\n        event.preventDefault();\r\n        selectItem(item);\r\n    };\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ alignContent: \"center\", display: \"block\", margin: \"auto\", borderStyle: \"dotted\", color: \"white\", marginBottom: \"3vh\", padding: \"5px\" }}>\r\n                <input\r\n                    className=\"jsfile-input\"\r\n                    id=\"input_json\"\r\n                    type=\"file\"\r\n                    ref={fileRef}\r\n                    onChange={handleFileInput}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n\r\n                <button className=\"jsfile-button load\" onClick={() => loadFile()} >\r\n                    load\r\n                </button>\r\n                <button className=\"jsfile-button export\" onClick={() => exportData()}>\r\n                    export\r\n                </button>\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <h2 className=\"sel-instr\" style={{ display: \"inline-block\" }}>{showName()}</h2>\r\n            </div>\r\n            <div>\r\n                <button className=\"instr-change-button add\" style={{ display: \"inline-block\" }} onClick={() => addNewInstr()}>\r\n                    add\r\n                </button>\r\n                {\r\n                    selItem.key !== genDefInstr().key ?\r\n                    <>\r\n                        <InstrEditPopup text=\"edit\" selItem={selItem} setSelItem={setSelItem} instrList={instrList} setInstrList={setInstrList} style={{ display: \"inline-block\" }} />\r\n                        <button className=\"instr-change-button delete\" style={{ display: \"inline-block\" }} onClick={() => delInstr()}>\r\n                            delete\r\n                        </button> \r\n                    </>\r\n                    : <div></div>\r\n                } \r\n            </div>\r\n            <ScrollView className=\"instr-list-view\" style={{ height: \"30vh\" }} persistentScrollbar={true}>\r\n                <FlatList\r\n                    className=\"instr-list\"\r\n                    data={instrList}\r\n                    renderItem={({ item }) => (\r\n                        <TouchableOpacity onPress={(e) => handleItemClick(e,item)} key={item.key} style={{\r\n                            backgroundColor: item.key === selItem.key ? 'salmon' : ''\r\n                        }}>\r\n                            <div className=\"instr-item\" >\r\n                                {`${item.name}`} <br></br>\r\n                                {`${item.strformat}`}\r\n                            </div>\r\n                        </TouchableOpacity>\r\n                    )}\r\n                    numColumns={1}\r\n                    keyExtractor={item => item.key}\r\n                    ItemSeparatorComponent={renderSeparator}\r\n                />\r\n            </ScrollView>\r\n\r\n            <div>\r\n                <button className=\"auto-match-button\" onClick={() => autoMatchItem()}>\r\n                    auto-match\r\n                </button>\r\n                <button className=\"clear-button\" onClick={() => clearItem()}>\r\n                    clear\r\n                </button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default InstrPanel;","\n\nimport './App.css';\n\nimport React from \"react\";\nimport InputForm from \"./components/InputForm\";\nimport DisplayBoard from \"./components/DisplayBoard\"\nimport InstrPanel from './components/InstrPanel';\nimport { genDefInstr } from \"./components/instr_panel/DefaultInstr\";\nimport env from \"react-dotenv\";\n\n\n\nclass App extends React.Component  {\n\n  componentDidMount() {\n    window.scrollTo(0, 0)\n    document.title = \"Instruction Hex-Bin-Dec Convert & Decoder\"\n  }\n\n  \n  constructor(props) {\n    super(props);\n    this.setConvInput = this.setConvInput.bind(this);\n    this.setSelItem = this.setSelItem.bind(this);\n    this.state = {\n      convInput: {\n        2:\"\",\n        10:\"\",\n        16:\"\"\n      },\n      selItem: genDefInstr()\n    };\n  }\n\n  setConvInput(updateConvInput) {\n    this.setState(prevState => ({...prevState,convInput:updateConvInput}));\n  }\n\n  setSelItem(updateSelItem) {\n    this.setState(prevState => ({...prevState,selItem:updateSelItem}));\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <div className='App-child'>\n        <header className=\"App-header\">\n          Instruction Hex-Bin-Dec Convert & Decoder &#60;{env.VERSION}&#62;\n        </header>\n        <div className='info-section'>\n          <p style={{marginBottom:\"1vh\"}}>developer's email: keneoneth18@gmail.com </p>\n          <p style={{marginBottom:\"1vh\"}}>instructions: <a href=\"https://github.com/keneoneth/InstrHexBinDecConvertDecoder-Release/wiki\" style={{color:\"wheat\"}}>https://github.com/keneoneth/InstrHexBinDecConvertDecoder-Release/wiki</a> </p>\n          <p>bug report: <a href=\"https://github.com/keneoneth/InstrHexBinDecConvertDecoder-Release/issues\" style={{color:\"wheat\"}}>https://github.com/keneoneth/InstrHexBinDecConvertDecoder-Release/issues</a> </p>\n        </div>\n        <InputForm className=\"input-form\" convInput={this.state.convInput} setConvInput={this.setConvInput}/>\n        <DisplayBoard className=\"display-board\"  convInput={this.state.convInput} selItem={this.state.selItem} />\n      </div>\n      <div className='App-child'>\n          <InstrPanel className=\"instr-panel\" convInput={this.state.convInput} selItem={this.state.selItem} setSelItem={this.setSelItem}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport env from \"react-dotenv\";\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nconsole.log(\"env.NODE_ENV \", env.NODE_ENV )\r\nconsole.log(\"env.VERSION \", env.VERSION )\r\n\r\nif (env.NODE_ENV === 'production') {\r\n  console.log = () => {}\r\n  console.error = () => {}\r\n  console.debug = () => {}\r\n}\r\n\r\n// render the app below as a single webpage\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}